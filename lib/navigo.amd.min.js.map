{"version":3,"sources":["webpack://Navigo.amd/./src/constants.ts","webpack://Navigo.amd/./src/utils.ts","webpack://Navigo.amd/./src/Q.ts","webpack://Navigo.amd/./src/middlewares/setLocationPath.ts","webpack://Navigo.amd/./src/middlewares/matchPathToRegisteredRoutes.ts","webpack://Navigo.amd/./src/middlewares/checkForDeprecationMethods.ts","webpack://Navigo.amd/./src/middlewares/checkForForceOp.ts","webpack://Navigo.amd/./src/middlewares/updateBrowserURL.ts","webpack://Navigo.amd/./src/middlewares/checkForLeaveHook.ts","webpack://Navigo.amd/./src/lifecycles.ts","webpack://Navigo.amd/./src/middlewares/checkForAlreadyHook.ts","webpack://Navigo.amd/./src/middlewares/checkForBeforeHook.ts","webpack://Navigo.amd/./src/middlewares/callHandler.ts","webpack://Navigo.amd/./src/middlewares/checkForAfterHook.ts","webpack://Navigo.amd/./src/middlewares/checkForNotFoundHandler.ts","webpack://Navigo.amd/./src/middlewares/errorOut.ts","webpack://Navigo.amd/./src/middlewares/flushCurrent.ts","webpack://Navigo.amd/./src/middlewares/processMatches.ts","webpack://Navigo.amd/./src/index.ts","webpack://Navigo.amd/webpack/bootstrap","webpack://Navigo.amd/webpack/startup","webpack://Navigo.amd/webpack/runtime/define property getters","webpack://Navigo.amd/webpack/runtime/hasOwnProperty shorthand"],"names":["PARAMETER_REGEXP","WILDCARD_REGEXP","NOT_SURE_REGEXP","clean","s","replace","isString","extractGETParameters","url","tmp","split","slice","join","parseQuery","queryString","query","pairs","i","length","pair","key","decodeURIComponent","Array","isArray","push","matchRoute","currentPath","route","pattern","current","GETParams","params","paramNames","path","full","dots","name","data","regexp","RegExp","match","names","reduce","value","index","regExpResultToParams","pushStateAvailable","window","history","pushState","undefinedOrTrue","obj","windowAvailable","Q","funcs","c","done","context","idx","next","splice","moveForward","_setLocationPath","currentLocationPath","instance","getCurrentEnvURL","_checkForAHash","matchPathToRegisteredRoutes","routes","matches","resolveOptions","strategy","checkForDeprecationMethods","navigateOptions","console","warn","checkForForceOp","force","_setCurrent","_pathToMatchObject","to","if","condition","one","two","isWindowAvailable","isPushStateAvailable","updateBrowserURL","isItUsingHash","hash","historyAPIMethod","stateObj","title","location","setTimeout","href","checkForLeaveHook","lastResolved","map","oldMatch","_","leaveLoopDone","hooks","leave","matchLocation","foundLifecycle","forEach","already","before","handler","updatePageLinks","after","notFoundLifeCycle","notFoundRoute","_notFoundRoute","notFoundHandled","notFoundMatch","noMatchWarning","processMatches","nextMatch","Navigo","appRoute","genericHooks","DEFAULT_RESOLVE_OPTIONS","self","this","root","destroyed","indexOf","createRoute","String","pathname","search","resolve","options","setLocationPath","call","document","querySelectorAll","link","hasListenerAttached","addEventListener","e","ctrlKey","metaKey","target","tagName","toLowerCase","getAttribute","URL","u","err","source","str","temp","v","parseNavigateOptions","preventDefault","stopPropagation","navigate","pathToMatchObject","on","Object","keys","p","uses","as","off","what","filter","r","destroy","removeEventListener","__popstateListener","notFound","generate","result","getLinkPath","currentLocation","getCurrentLocation","_clean","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","get","prop","prototype","hasOwnProperty"],"mappings":"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","file":"Navigo.amd.min.js","sourcesContent":["export const PARAMETER_REGEXP = /([:*])(\\w+)/g;\nexport const REPLACE_VARIABLE_REGEXP = \"([^/]+)\";\nexport const WILDCARD_REGEXP = /\\*/g;\nexport const REPLACE_WILDCARD = \"(?:.*)\";\nexport const NOT_SURE_REGEXP = /\\/\\?/g;\nexport const REPLACE_NOT_SURE = \"/?([^/]+|)\";\nexport const START_BY_SLASH_REGEXP = \"(?:/^|^)\";\nexport const MATCH_REGEXP_FLAGS = \"\";\n","import { Match, Route, NavigateOptions, ResolveOptions } from \"../index\";\n\nimport {\n  PARAMETER_REGEXP,\n  WILDCARD_REGEXP,\n  REPLACE_VARIABLE_REGEXP,\n  REPLACE_WILDCARD,\n  START_BY_SLASH_REGEXP,\n  MATCH_REGEXP_FLAGS,\n  REPLACE_NOT_SURE,\n  NOT_SURE_REGEXP,\n} from \"./constants\";\n\nexport function clean(s: string) {\n  return s.replace(/\\/+$/, \"\").replace(/^\\/+/, \"\");\n}\nexport function isString(s: any): boolean {\n  return typeof s === \"string\";\n}\nexport function isFunction(s: any): boolean {\n  return typeof s === \"function\";\n}\nexport function regExpResultToParams(match, names: string[]) {\n  if (names.length === 0) return null;\n  if (!match) return null;\n  return match.slice(1, match.length).reduce((params, value, index) => {\n    if (params === null) params = {};\n    params[names[index]] = decodeURIComponent(value);\n    return params;\n  }, null);\n}\nexport function extractGETParameters(url: string) {\n  const tmp = clean(url).split(/\\?(.*)?$/);\n  return [clean(tmp[0]), tmp.slice(1).join(\"\")];\n}\nexport function parseQuery(queryString: string): Object {\n  var query = {};\n  var pairs = queryString.split(\"&\");\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i].split(\"=\");\n    if (pair[0] !== \"\") {\n      let key = decodeURIComponent(pair[0]);\n      if (!query[key]) {\n        query[key] = decodeURIComponent(pair[1] || \"\");\n      } else {\n        if (!Array.isArray(query[key])) query[key] = [query[key]];\n        query[key].push(decodeURIComponent(pair[1] || \"\"));\n      }\n    }\n  }\n  return query;\n}\nexport function matchRoute(currentPath: string, route: Route): false | Match {\n  const [current, GETParams] = extractGETParameters(clean(currentPath));\n  const params = GETParams === \"\" ? null : parseQuery(GETParams);\n  const paramNames = [];\n  let pattern;\n  if (isString(route.path)) {\n    pattern =\n      START_BY_SLASH_REGEXP +\n      clean(route.path as string)\n        .replace(PARAMETER_REGEXP, function (full, dots, name) {\n          paramNames.push(name);\n          return REPLACE_VARIABLE_REGEXP;\n        })\n        .replace(WILDCARD_REGEXP, REPLACE_WILDCARD)\n        .replace(NOT_SURE_REGEXP, REPLACE_NOT_SURE) +\n      \"$\";\n    if (clean(route.path as string) === \"\") {\n      if (clean(current) === \"\") {\n        return {\n          url: current,\n          queryString: GETParams,\n          route: route,\n          data: null,\n          params,\n        };\n      }\n    }\n  } else {\n    pattern = route.path;\n  }\n  const regexp = new RegExp(pattern, MATCH_REGEXP_FLAGS);\n  const match = current.match(regexp);\n\n  if (match) {\n    const data = isString(route.path)\n      ? regExpResultToParams(match, paramNames)\n      : match.slice(1);\n    return {\n      url: current,\n      queryString: GETParams,\n      route: route,\n      data,\n      params,\n    };\n  }\n  return false;\n}\nexport function pushStateAvailable(): boolean {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.history &&\n    window.history.pushState\n  );\n}\nexport function undefinedOrTrue(obj, key: string): boolean {\n  return typeof obj[key] === \"undefined\" || obj[key] === true;\n}\nexport function parseNavigateOptions(source?: string): NavigateOptions {\n  if (!source) return {};\n  const pairs = source.split(\",\");\n  const options: NavigateOptions = {};\n  let resolveOptions: ResolveOptions;\n\n  pairs.forEach((str) => {\n    const temp = str.split(\":\").map((v) => v.replace(/(^ +| +$)/g, \"\"));\n    switch (temp[0]) {\n      case \"historyAPIMethod\":\n        options.historyAPIMethod = temp[1];\n        break;\n      case \"resolveOptionsStrategy\":\n        if (!resolveOptions) resolveOptions = {};\n        resolveOptions.strategy = temp[1];\n        break;\n      case \"resolveOptionsHash\":\n        if (!resolveOptions) resolveOptions = {};\n        resolveOptions.hash = temp[1] === \"true\";\n        break;\n      case \"updateBrowserURL\":\n      case \"callHandler\":\n      case \"updateState\":\n      case \"force\":\n        options[temp[0]] = temp[1] === \"true\";\n        break;\n    }\n  });\n  if (resolveOptions) {\n    options.resolveOptions = resolveOptions;\n  }\n  return options;\n}\nexport function windowAvailable() {\n  return typeof window !== \"undefined\";\n}\n","type QChild = {\n  type: \"child\";\n  funcs: Array<Function | Array<any> | QChild>;\n};\n\nexport default function Q(\n  funcs: Array<Function | Array<any> | QChild>,\n  c?: any,\n  done?: Function\n) {\n  const context = c || {};\n  let idx = 0;\n\n  (function next() {\n    if (!funcs[idx]) {\n      if (done) {\n        done(context);\n      }\n      return;\n    }\n    if (Array.isArray(funcs[idx])) {\n      funcs.splice(\n        idx,\n        1,\n        ...(funcs[idx][0](context) ? funcs[idx][1] : funcs[idx][2])\n      );\n      next();\n    } else {\n      // console.log(funcs[idx].name + \" / \" + JSON.stringify(context));\n      // console.log(funcs[idx].name);\n      (funcs[idx] as Function)(context, (moveForward) => {\n        if (typeof moveForward === \"undefined\" || moveForward === true) {\n          idx += 1;\n          next();\n        } else if (done) {\n          done(context);\n        }\n      });\n    }\n  })();\n}\n\nQ.if = function (condition: Function, one, two) {\n  if (!Array.isArray(one)) one = [one];\n  if (!Array.isArray(two)) two = [two];\n  return [condition, one, two];\n};\n","import { QContext } from \"../../index\";\n\nexport default function _setLocationPath(context: QContext, done) {\n  if (typeof context.currentLocationPath === \"undefined\") {\n    context.currentLocationPath = context.instance.getCurrentEnvURL();\n  }\n  context.currentLocationPath = context.instance._checkForAHash(\n    context.currentLocationPath\n  );\n  done();\n}\n","import { matchRoute } from \"../utils\";\nimport { QContext, Match } from \"../../index\";\n\nexport default function matchPathToRegisteredRoutes(context: QContext, done) {\n  for (let i = 0; i < context.instance.routes.length; i++) {\n    const route = context.instance.routes[i];\n    const match: false | Match = matchRoute(context.currentLocationPath, route);\n    if (match) {\n      if (!context.matches) context.matches = [];\n      context.matches.push(match);\n      if (context.resolveOptions.strategy === \"ONE\") {\n        done();\n        return;\n      }\n    }\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function checkForDeprecationMethods(context: QContext, done) {\n  if (context.navigateOptions) {\n    if (typeof context.navigateOptions[\"shouldResolve\"] !== \"undefined\") {\n      console.warn(\n        `\"shouldResolve\" is deprecated. Please check the documentation.`\n      );\n    }\n    if (typeof context.navigateOptions[\"silent\"] !== \"undefined\") {\n      console.warn(`\"silent\" is deprecated. Please check the documentation.`);\n    }\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function checkForForceOp(context: QContext, done) {\n  if (context.navigateOptions.force === true) {\n    context.instance._setCurrent([\n      context.instance._pathToMatchObject(context.to),\n    ]);\n    done(false);\n  } else {\n    done();\n  }\n}\n","import { undefinedOrTrue, pushStateAvailable, windowAvailable } from \"../utils\";\nimport { QContext } from \"../../index\";\n\nconst isWindowAvailable = windowAvailable();\nconst isPushStateAvailable = pushStateAvailable();\n\nexport default function updateBrowserURL(context: QContext, done) {\n  if (undefinedOrTrue(context.navigateOptions, \"updateBrowserURL\")) {\n    const value = `${context.to}`.replace(/\\/\\//g, \"/\"); // making sure that we don't have two slashes\n    const isItUsingHash =\n      isWindowAvailable &&\n      context.resolveOptions &&\n      context.resolveOptions.hash === true;\n    if (isPushStateAvailable) {\n      history[context.navigateOptions.historyAPIMethod || \"pushState\"](\n        context.navigateOptions.stateObj || {},\n        context.navigateOptions.title || \"\",\n        isItUsingHash ? `#${value}` : value\n      );\n      // This is to solve a nasty bug where the page doesn't scroll to the anchor.\n      // We set a microtask to update the hash only.\n      if (location && location.hash) {\n        setTimeout(() => {\n          let tmp = location.hash;\n          location.hash = \"\";\n          location.hash = tmp;\n        }, 1);\n      }\n    } else if (isWindowAvailable) {\n      window.location.href = context.to;\n    }\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\nimport Q from \"../Q\";\n\nexport default function checkForLeaveHook(context: QContext, done) {\n  const instance = context.instance;\n  if (!instance.lastResolved()) {\n    done();\n    return;\n  }\n  Q(\n    [\n      ...instance.lastResolved().map((oldMatch) => {\n        return (_, leaveLoopDone) => {\n          // no leave hook\n          if (!oldMatch.route.hooks || !oldMatch.route.hooks.leave) {\n            leaveLoopDone();\n            return;\n          }\n          // no match or different path\n          if (\n            !context.match ||\n            !instance.matchLocation(\n              oldMatch.route.path as string,\n              context.match.url\n            )\n          ) {\n            oldMatch.route.hooks.leave((moveForward: boolean) => {\n              if (typeof moveForward === \"undefined\" || moveForward === true) {\n                leaveLoopDone();\n              }\n            }, context.match);\n            return;\n          } else {\n            leaveLoopDone();\n          }\n        };\n      }),\n    ],\n    {},\n    () => done()\n  );\n}\n","import { QContext } from \"../index\";\nimport Q from \"./Q\";\nimport checkForLeaveHook from \"./middlewares/checkForLeaveHook\";\nimport checkForBeforeHook from \"./middlewares/checkForBeforeHook\";\nimport callHandler from \"./middlewares/callHandler\";\nimport checkForAfterHook from \"./middlewares/checkForAfterHook\";\nimport checkForAlreadyHook from \"./middlewares/checkForAlreadyHook\";\nimport checkForNotFoundHandler from \"./middlewares/checkForNotFoundHandler\";\nimport errorOut from \"./middlewares/errorOut\";\nimport flushCurrent from \"./middlewares/flushCurrent\";\n\nexport const foundLifecycle = [\n  checkForAlreadyHook,\n  checkForLeaveHook,\n  checkForBeforeHook,\n  callHandler,\n  checkForAfterHook,\n];\n\nexport const notFoundLifeCycle = [\n  checkForNotFoundHandler,\n  Q.if(({ notFoundHandled }: QContext) => notFoundHandled, foundLifecycle, [\n    errorOut,\n    checkForLeaveHook,\n  ]),\n  flushCurrent,\n];\n","import { QContext } from \"../../index\";\n\nexport default function checkForAlreadyHook(context: QContext, done) {\n  const current = context.instance.lastResolved();\n  if (\n    current &&\n    current[0] &&\n    current[0].route === context.match.route &&\n    current[0].url === context.match.url &&\n    current[0].queryString === context.match.queryString\n  ) {\n    current.forEach((c) => {\n      if (c.route.hooks && c.route.hooks.already) {\n        c.route.hooks.already(context.match);\n      }\n    });\n    done(false);\n    return;\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function checkForBeforeHook(context: QContext, done) {\n  if (context.match.route.hooks && context.match.route.hooks.before) {\n    context.match.route.hooks.before((moveForward: boolean) => {\n      if (typeof moveForward === \"undefined\" || moveForward === true) {\n        done();\n      }\n    }, context.match);\n  } else {\n    done();\n  }\n}\n","import { QContext } from \"../../index\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function callHandler(context: QContext, done) {\n  if (undefinedOrTrue(context.navigateOptions, \"updateState\")) {\n    context.instance._setCurrent(context.matches);\n  }\n  if (undefinedOrTrue(context.navigateOptions, \"callHandler\")) {\n    context.match.route.handler(context.match);\n  }\n  context.instance.updatePageLinks();\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function _checkForAfterHook(context: QContext, done) {\n  if (context.match.route.hooks && context.match.route.hooks.after) {\n    context.match.route.hooks.after(context.match);\n  }\n  done();\n}\n","import { QContext, Match } from \"../../index\";\nimport { parseQuery, extractGETParameters, clean } from \"../utils\";\n\nexport default function checkForNotFoundHandler(context: QContext, done) {\n  const notFoundRoute = context.instance._notFoundRoute;\n  if (notFoundRoute) {\n    context.notFoundHandled = true;\n    const [url, queryString] = extractGETParameters(\n      context.currentLocationPath\n    );\n    notFoundRoute.path = clean(url);\n    const notFoundMatch: Match = {\n      url: notFoundRoute.path,\n      queryString,\n      data: null,\n      route: notFoundRoute,\n      params: queryString !== \"\" ? parseQuery(queryString) : null,\n    };\n    context.matches = [notFoundMatch];\n    context.match = notFoundMatch;\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function errorOut(context: QContext, done) {\n  if (\n    !context.resolveOptions ||\n    context.resolveOptions.noMatchWarning === false ||\n    typeof context.resolveOptions.noMatchWarning === \"undefined\"\n  )\n    console.warn(\n      `Navigo: \"${context.currentLocationPath}\" didn't match any of the registered routes.`\n    );\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function flushCurrent(context: QContext, done) {\n  context.instance._setCurrent(null);\n  done();\n}\n","import { QContext } from \"../../index\";\nimport Q from \"../Q\";\nimport { foundLifecycle } from \"../lifecycles\";\n\nexport default function processMatches(context: QContext, done) {\n  let idx = 0;\n  // console.log(\n  //   \"_processMatches matches=\" +\n  //     (context.matches ? context.matches.length : 0)\n  // );\n  (function nextMatch() {\n    if (idx === context.matches.length) {\n      done();\n      return;\n    }\n    Q(\n      foundLifecycle,\n      { ...context, match: context.matches[idx] },\n      function end() {\n        idx += 1;\n        nextMatch();\n      }\n    );\n  })();\n}\n","import {\n  Match,\n  Route,\n  RouteHooks,\n  QContext,\n  NavigateOptions,\n  ResolveOptions,\n} from \"../index\";\nimport NavigoRouter from \"../index\";\nimport {\n  pushStateAvailable,\n  matchRoute,\n  parseQuery,\n  extractGETParameters,\n  isFunction,\n  isString,\n  clean,\n  parseNavigateOptions,\n  windowAvailable,\n} from \"./utils\";\nimport Q from \"./Q\";\nimport setLocationPath from \"./middlewares/setLocationPath\";\nimport matchPathToRegisteredRoutes from \"./middlewares/matchPathToRegisteredRoutes\";\nimport checkForDeprecationMethods from \"./middlewares/checkForDeprecationMethods\";\nimport checkForForceOp from \"./middlewares/checkForForceOp\";\nimport updateBrowserURL from \"./middlewares/updateBrowserURL\";\nimport processMatches from \"./middlewares/processMatches\";\n\nimport { notFoundLifeCycle } from \"./lifecycles\";\n\nexport default function Navigo(\n  appRoute?: string,\n  resolveOptions?: ResolveOptions\n) {\n  let DEFAULT_RESOLVE_OPTIONS: ResolveOptions = resolveOptions || {\n    strategy: \"ONE\",\n    hash: false,\n    noMatchWarning: false,\n  };\n  let self: NavigoRouter = this;\n  let root = \"/\";\n  let current: Match[] = null;\n  let routes: Route[] = [];\n  let destroyed = false;\n  let genericHooks: RouteHooks;\n\n  const isPushStateAvailable = pushStateAvailable();\n  const isWindowAvailable = windowAvailable();\n\n  if (!appRoute) {\n    console.warn(\n      'Navigo requires a root path in its constructor. If not provided will use \"/\" as default.'\n    );\n  } else {\n    root = clean(appRoute);\n  }\n\n  function _checkForAHash(url: string): string {\n    if (url.indexOf(\"#\") >= 0) {\n      if (DEFAULT_RESOLVE_OPTIONS.hash === true) {\n        url = url.split(\"#\")[1] || \"/\";\n      } else {\n        url = url.split(\"#\")[0];\n      }\n    }\n    return url;\n  }\n\n  // public APIs\n  function createRoute(\n    path: string | RegExp,\n    handler: Function,\n    hooks: RouteHooks,\n    name?: string\n  ): Route {\n    path = isString(path) ? clean(`${root}/${clean(path as string)}`) : path;\n    return {\n      name: name || String(path),\n      path,\n      handler,\n      hooks,\n    };\n  }\n  function getCurrentEnvURL(): string {\n    if (isWindowAvailable) {\n      return location.pathname + location.search + location.hash;\n    }\n    return root;\n  }\n  function on(\n    path: string | Function | Object | RegExp,\n    handler?: Function,\n    hooks?: RouteHooks\n  ) {\n    if (typeof path === \"object\" && !(path instanceof RegExp)) {\n      Object.keys(path).forEach((p) => {\n        if (typeof path[p] === \"function\") {\n          this.on(p, path[p]);\n        } else {\n          const { uses: handler, as: name, hooks } = path[p];\n          routes.push(createRoute(p, handler, hooks || genericHooks, name));\n        }\n      });\n      return this;\n    } else if (typeof path === \"function\") {\n      hooks = handler as RouteHooks;\n      handler = path as Function;\n      path = root;\n    }\n    routes.push(\n      createRoute(path as string | RegExp, handler, hooks || genericHooks)\n    );\n    return this;\n  }\n  function resolve(\n    currentLocationPath?: string,\n    options?: ResolveOptions\n  ): false | Match[] {\n    const context: QContext = {\n      instance: self,\n      currentLocationPath,\n      navigateOptions: {},\n      resolveOptions: options || DEFAULT_RESOLVE_OPTIONS,\n    };\n    Q(\n      [\n        setLocationPath,\n        matchPathToRegisteredRoutes,\n        Q.if(\n          ({ matches }: QContext) => {\n            // console.log(`${currentLocationPath} -> Matches: ${matches.length}`);\n            return matches && matches.length > 0;\n          },\n          processMatches,\n          notFoundLifeCycle\n        ),\n      ],\n      context\n    );\n\n    return context.matches ? context.matches : false;\n  }\n  function navigate(to: string, navigateOptions?: NavigateOptions): void {\n    to = `${clean(root)}/${clean(to)}`;\n    const context: QContext = {\n      instance: self,\n      to,\n      navigateOptions: navigateOptions || {},\n      resolveOptions:\n        navigateOptions && navigateOptions.resolveOptions\n          ? navigateOptions.resolveOptions\n          : DEFAULT_RESOLVE_OPTIONS,\n      currentLocationPath: _checkForAHash(to),\n    };\n    Q(\n      [\n        checkForDeprecationMethods,\n        checkForForceOp,\n        matchPathToRegisteredRoutes,\n        Q.if(\n          ({ matches }: QContext) => matches && matches.length > 0,\n          processMatches,\n          notFoundLifeCycle\n        ),\n        updateBrowserURL,\n      ],\n      context\n    );\n  }\n  function off(what: string | RegExp | Function) {\n    this.routes = routes = routes.filter((r) => {\n      if (isString(what)) {\n        return clean(r.path as string) !== clean(what as string);\n      } else if (isFunction(what)) {\n        return what !== r.handler;\n      }\n      return String(r.path) !== String(what);\n    });\n    return this;\n  }\n  function listen() {\n    if (isPushStateAvailable) {\n      this.__popstateListener = () => {\n        resolve();\n      };\n      window.addEventListener(\"popstate\", this.__popstateListener);\n    }\n  }\n  function destroy() {\n    this.routes = routes = [];\n    if (isPushStateAvailable) {\n      window.removeEventListener(\"popstate\", this.__popstateListener);\n    }\n    this.destroyed = destroyed = true;\n  }\n  function notFound(handler, hooks?: RouteHooks) {\n    self._notFoundRoute = createRoute(\n      \"*\",\n      handler,\n      hooks || genericHooks,\n      \"__NOT_FOUND__\"\n    );\n    return this;\n  }\n  function updatePageLinks() {\n    if (!isWindowAvailable) return;\n    findLinks().forEach((link) => {\n      if (!link.hasListenerAttached) {\n        link.addEventListener(\"click\", function (e) {\n          if (\n            (e.ctrlKey || e.metaKey) &&\n            e.target.tagName.toLowerCase() === \"a\"\n          ) {\n            return false;\n          }\n          let location = link.getAttribute(\"href\");\n          if (typeof location === \"undefined\" || location === null) {\n            return false;\n          }\n          // handling absolute paths\n          if (location.match(/^(http|https)/) && typeof URL !== \"undefined\") {\n            try {\n              const u = new URL(location);\n              location = u.pathname + u.search;\n            } catch (err) {}\n          }\n          const options = parseNavigateOptions(\n            link.getAttribute(\"data-navigo-options\")\n          );\n\n          if (!destroyed) {\n            e.preventDefault();\n            e.stopPropagation();\n            self.navigate(clean(location), options);\n          }\n        });\n        link.hasListenerAttached = true;\n      }\n    });\n    return self;\n  }\n  function findLinks() {\n    if (isWindowAvailable) {\n      return [].slice.call(document.querySelectorAll(\"[data-navigo]\"));\n    }\n    return [];\n  }\n  function link(path: string) {\n    return `/${root}/${clean(path)}`;\n  }\n  function setGenericHooks(hooks: RouteHooks) {\n    genericHooks = hooks;\n    return this;\n  }\n  function lastResolved(): Match[] | null {\n    return current;\n  }\n  function generate(name: string, data?: Object): string {\n    const result = routes.reduce((result, route) => {\n      let key;\n\n      if (route.name === name) {\n        result = route.path as string;\n        for (key in data) {\n          result = result.replace(\":\" + key, data[key]);\n        }\n      }\n      return result;\n    }, \"\");\n    return !result.match(/^\\//) ? `/${result}` : result;\n  }\n  function getLinkPath(link) {\n    return link.getAttribute(\"href\");\n  }\n  function pathToMatchObject(path: string): Match {\n    const [url, queryString] = extractGETParameters(clean(path));\n    const params = queryString === \"\" ? null : parseQuery(queryString);\n    const route = createRoute(url, () => {}, genericHooks, url);\n    return {\n      url,\n      queryString,\n      route,\n      data: null,\n      params: params,\n    };\n  }\n  function getCurrentLocation(): Match {\n    return pathToMatchObject(\n      clean(getCurrentEnvURL()).replace(new RegExp(`^${root}`), \"\")\n    );\n  }\n  function directMatchWithRegisteredRoutes(path: string): false | Match[] {\n    const context: QContext = {\n      instance: self,\n      currentLocationPath: path,\n      navigateOptions: {},\n      resolveOptions: DEFAULT_RESOLVE_OPTIONS,\n    };\n    matchPathToRegisteredRoutes(context, () => {});\n    return context.matches ? context.matches : false;\n  }\n  function directMatchWithLocation(\n    path: string,\n    currentLocation?: string\n  ): false | Match {\n    const context: QContext = {\n      instance: self,\n      currentLocationPath: currentLocation,\n    };\n    setLocationPath(context, () => {});\n    path = clean(path);\n    const match = matchRoute(context.currentLocationPath, {\n      name: path,\n      path,\n      handler: () => {},\n      hooks: {},\n    });\n    return match ? match : false;\n  }\n\n  this.root = root;\n  this.routes = routes;\n  this.destroyed = destroyed;\n  this.current = current;\n\n  this.on = on;\n  this.off = off;\n  this.resolve = resolve;\n  this.navigate = navigate;\n  this.destroy = destroy;\n  this.notFound = notFound;\n  this.updatePageLinks = updatePageLinks;\n  this.link = link;\n  this.hooks = setGenericHooks;\n  this.extractGETParameters = (url) =>\n    extractGETParameters(_checkForAHash(url));\n  this.lastResolved = lastResolved;\n  this.generate = generate;\n  this.getLinkPath = getLinkPath;\n  this.match = directMatchWithRegisteredRoutes;\n  this.matchLocation = directMatchWithLocation;\n  this.getCurrentLocation = getCurrentLocation;\n  this.getCurrentEnvURL = getCurrentEnvURL;\n  this._pathToMatchObject = pathToMatchObject;\n  this._clean = clean;\n  this._checkForAHash = _checkForAHash;\n  this._setCurrent = (c) => (current = self.current = c);\n\n  listen.call(this);\n  updatePageLinks.call(this);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(184);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)"],"sourceRoot":""}